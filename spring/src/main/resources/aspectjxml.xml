<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--以下的各种通知不能同时执行，只能单独执行某一个通知-->
    <!--1.配置目标类-->
    <bean id="bookService" class="cn.lynu.xy.aop.aspectjxml.BookServiceImpl"></bean>
    <!--2.配置切面类（通知）-->
    <bean id="myAspect" class="cn.lynu.xy.aop.aspectjxml.MyAspect"></bean>
    <!--3.aop编程，将上面两者融合
        3.1.配置 <aop:config>标签使用aop编程，所有的内容都写在此标签内
        3.2.配置切入点：<aop:pointcut>就是目标类中的方法
        3.3.配置切入点表达式：expression="execution(* cn.lynu.xy.aop.aspectjxml.BookServiceImpl.*(..))"
        3.4.配置切面<aop:aspect ref="myAspect">：表示引用哪个切面类中的通知
     -->
    <aop:config>
        <aop:pointcut id="myPointCut"
                      expression="execution(* cn.lynu.xy.aop.aspectjxml.BookServiceImpl.*(..))"></aop:pointcut>
        <aop:aspect ref="myAspect">
            <!--以下为五种常用的通知-->
            <aop:before method="myBefore" pointcut-ref="myPointCut"></aop:before>
            <!--
                1.前置通知： public void myBefore(JoinPoint joinPoint)
                <aop:before method="myBefore" pointcut-ref="myPointCut">
                aop:before表示通知类型，这里使用前置通知
                method：表示使用切面类中的哪个方法
                pointcut-ref：表示和其他类型的通知共同引用切入点
                pointcut：表示当前通知单独使用切入点（此处由于切入点公用，所以没有此标签）
             -->

            <aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut"
                                 returning="ret"></aop:after-returning>
            <!--
                2.后置通知：public void myAfterReturning(JoinPoint joinPoint,Object ret)
                后置通知在目标方法后执行，可以获得目标方法的返回值，由returning获得
                第一个参数：类型JoinPoint，用于获取目标方法的相关信息（方法名等）
                第二个参数：类型Object，参数名由xml文件中的returning配置
                returning：值为通知方法第二个参数的名称
             -->

            <aop:around method="myAround" pointcut-ref="myPointCut"></aop:around>
            <!--
                3.环绕通知： public Object myAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable
                返回值：必须为Object类型
                参数：必须为ProceedingJoinPoint类型
                异常需要抛出
             -->

            <aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut"
                                throwing="throwable"></aop:after-throwing>
            <!--
                4.异常通知：public void myAfterThrowing(JoinPoint joinPoint,Throwable throwable)
                方法名：任意
                第二个参数：类型必须为Throwable，名称由xml中的throwing配置
             -->

            <aop:after method="myAfter" pointcut-ref="myPointCut"></aop:after>
            <!--
                5.最终通知：public void myAfter(JoinPoint joinPoint)
                由于是最终通知，所以无论目标方法怎样都会执行，即使目标方法有错误，最终通知也会跳过异常执行
             -->

        </aop:aspect>
    </aop:config>
</beans>